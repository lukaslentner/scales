package de.lukaslentner.harmony.domain.model.scale;

import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.regex.Pattern;

import de.lukaslentner.harmony.domain.model.pitchInterval.EqualTemperedPitchIntervals;
import de.lukaslentner.harmony.domain.model.pitchInterval.PitchInterval;

public abstract class ScalePatternPredicates {
  
  public static final Function<Integer, Predicate<ScalePattern>> N_TONIC =
    o -> (p -> p.getGeneratingScale().isNTonic(o));
    
  public static final Function<Set<PitchInterval>, Predicate<ScalePattern>> RESTRICT_RELATIVE_INTERVALS =
    o -> (p -> o.containsAll(p.getGeneratingScale().getRelativeIntervalsWithOctave()));
    
  public static final BiFunction<PitchInterval, Integer, Predicate<ScalePattern>> RESTRICT_SMALL_INTERVAL_PAIRS =
    (o1, o2) -> (p -> p.getGeneratingScale().getRelativeIntervalsWithOctave().getPairsCountSmallerThan(o1) <= o2);
    
  public static final Predicate<ScalePattern> HIGHER_SYMETRY = o -> o.getModusCount() != o.getScaleSize();
  
  public static final Function<Pattern, Predicate<ScalePattern>> RELATIVE_INTERVALS_PATTERN =
    o -> (p -> p.getGeneratingScale().getRelativeIntervalsWithOctave().getMatch(o));
    
  public static final Predicate<ScalePattern> TRUE = o -> true;
  
  public static final Predicate<ScalePattern> FALSE = o -> false;
  
  // Could also be generated by 6x Quints
  // Could also be generated by 2 tetrachords separated by a full tone
  // In this pattern the semitones are maximal apart (compared to melodic moll)
  public static final Predicate<ScalePattern> DIATONIC =
    TRUE
      .and(N_TONIC.apply(7))
      .and(
        RESTRICT_RELATIVE_INTERVALS.apply(EqualTemperedPitchIntervals.upTo(EqualTemperedPitchIntervals.MAJOR_SECOND)))
      .and(RELATIVE_INTERVALS_PATTERN.apply(Pattern.compile(".*1,2,2,1.*")));
      
  public static final Function<PitchInterval, Predicate<ScalePattern>> XXX =
    o -> TRUE.and(RESTRICT_RELATIVE_INTERVALS.apply(EqualTemperedPitchIntervals.upTo(o))).and(
      RESTRICT_SMALL_INTERVAL_PAIRS.apply(o, 0));
      
}
